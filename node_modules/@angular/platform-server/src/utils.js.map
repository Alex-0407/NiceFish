{"version":3,"sources":["../../../../modules/@angular/platform-server/src/utils.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,cAAE,EAAyE,MAAA,eAAA,CAAA;AAClF,OAAO,EAAA,MAAE,EAAM,MAAA,sBAAA,CAAA;AACf,OAAO,EAAA,KAAE,EAAK,MAAA,qBAAA,CAAA;AACd,OAAO,EAAA,SAAE,EAAS,MAAA,yBAAA,CAAA;AAElB,OAAO,EAAA,aAAE,EAAa,MAAA,kBAAA,CAAA;AACtB,OAAO,EAAA,qBAAE,EAAsB,cAAA,EAAe,MAAA,UAAA,CAAA;AAC9C,OAAO,EAAA,cAAE,EAAc,MAAA,UAAA,CAAA;AAEvB,IAAM,gBAAgB,CAAhB,MAAA,GAAS,OAAA,CAAQ,QAAC,CAAQ,CAAC;AAOjC;;;;GAIG;AACH,sBACI,eAA4D,EAC5D,OAAwB;IAC1B,IAAM,gBAAgB,CAJhB,cAAA,GAAiB,OAAA,CAAQ,cAAC,GAAgB,OAAA,CAAQ,cAAC,GAAgB,EAAA,CAAG;IAK5E,MAAM,CAJC,eAAA,CAAgB;QAKrB,EAAC,OAJC,EAAQ,cAAA,EAAgB,QAAA,EAAU,EAAA,QAAE,EAAS,OAAA,CAAQ,QAAC,EAAS,GAAA,EAAK,OAAA,CAAQ,GAAC,EAAG,EAAC;QAKnF,cAAc;KACf,CAJC,CAAC;AAKL,CAAC;AACD;;;;GAIG;AACH,iBACI,QAAqB,EAAE,gBAAyC;IAClE,MAAM,CARC,gBAAA,CAAiB,IAAC,CAAI,UAAC,SAAC;QAS7B,IAAM,gBAAgB,CARhB,cAAA,GAAiC,SAAA,CAAU,QAAC,CAAQ,GAAC,CAAG,cAAC,CAAc,CAAC;QAS9E,MAAM,CARC,SAAA;aASF,IARC,CAAI,KAAC,CAAK,IAAC,CAAI,MAAC,CAAM,IAAC,CAAI,cAAC,CAAc,QAAC,EAAS,UAAA,QAAW,IAAY,OAAA,QAAA,EAAA,CAAA,CAAS,CAAC,CAAC;aASvF,IARC,CAAI;YASJ,IAAM,gBAAgB,CARhB,MAAA,GAAS,QAAA,CAAS,QAAC,CAAQ,GAAC,CAAG,aAAC,CAAa,CAAC,cAAC,EAAc,CAAE;YASrE,QAAQ,CARC,OAAC,EAAO,CAAE;YASnB,MAAM,CARC,MAAA,CAAO;QAShB,CAAC,CARC,CAAC;IAST,CAAC,CARC,CAAC;AASL,CAAC;AACD;;;;;;;;;;GAUG;AACH,MAVC,uBAAA,MAAA,EAAA,OAAA;IAWC,IAAM,gBAAgB,CAVhB,QAAA,GAAW,YAAA,CAAa,qBAAC,EAAsB,OAAA,CAAQ,CAAC;IAW9D,MAAM,CAVC,OAAA,CAAQ,QAAC,EAAS,QAAA,CAAS,eAAC,CAAe,MAAC,CAAM,CAAC,CAAC;AAW7D,CAAC;AACD;;;;;;;GAOG;AACH,MAZC,8BAaG,aAAiC,EAAE,OAAwB;IAC7D,IAAM,gBAAgB,CAZhB,QAAA,GAAW,YAAA,CAAa,cAAC,EAAe,OAAA,CAAQ,CAAC;IAavD,MAAM,CAZC,OAAA,CAAQ,QAAC,EAAS,QAAA,CAAS,sBAAC,CAAsB,aAAC,CAAa,CAAC,CAAC;AAa3E,CAAC","file":"utils.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef, NgModuleFactory, NgModuleRef, PlatformRef, Provider, Type} from '@angular/core';\nimport {filter} from 'rxjs/operator/filter';\nimport {first} from 'rxjs/operator/first';\nimport {toPromise} from 'rxjs/operator/toPromise';\n\nimport {PlatformState} from './platform_state';\nimport {platformDynamicServer, platformServer} from './server';\nimport {INITIAL_CONFIG} from './tokens';\n\nconst /** @type {?} */ parse5 = require('parse5');\n\nexport interface PlatformOptions {\n  document?: string;\n  url?: string;\n  extraProviders?: Provider[];\n}\n/**\n * @param {?} platformFactory\n * @param {?} options\n * @return {?}\n */\nfunction _getPlatform(\n    platformFactory: (extraProviders: Provider[]) => PlatformRef,\n    options: PlatformOptions): PlatformRef {\n  const /** @type {?} */ extraProviders = options.extraProviders ? options.extraProviders : [];\n  return platformFactory([\n    {provide: INITIAL_CONFIG, useValue: {document: options.document, url: options.url}},\n    extraProviders\n  ]);\n}\n/**\n * @param {?} platform\n * @param {?} moduleRefPromise\n * @return {?}\n */\nfunction _render<T>(\n    platform: PlatformRef, moduleRefPromise: Promise<NgModuleRef<T>>): Promise<string> {\n  return moduleRefPromise.then((moduleRef) => {\n    const /** @type {?} */ applicationRef: ApplicationRef = moduleRef.injector.get(ApplicationRef);\n    return toPromise\n        .call(first.call(filter.call(applicationRef.isStable, (isStable: boolean) => isStable)))\n        .then(() => {\n          const /** @type {?} */ output = platform.injector.get(PlatformState).renderToString();\n          platform.destroy();\n          return output;\n        });\n  });\n}\n/**\n * Renders a Module to string.\n * \n * Do not use this in a production server environment. Use pre-compiled {\\@link NgModuleFactory} with\n * {link renderModuleFactory} instead.\n * \n * \\@experimental\n * @param {?} module\n * @param {?} options\n * @return {?}\n */\nexport function renderModule<T>(module: Type<T>, options: PlatformOptions): Promise<string> {\n  const /** @type {?} */ platform = _getPlatform(platformDynamicServer, options);\n  return _render(platform, platform.bootstrapModule(module));\n}\n/**\n * Renders a {\\@link NgModuleFactory} to string.\n * \n * \\@experimental\n * @param {?} moduleFactory\n * @param {?} options\n * @return {?}\n */\nexport function renderModuleFactory<T>(\n    moduleFactory: NgModuleFactory<T>, options: PlatformOptions): Promise<string> {\n  const /** @type {?} */ platform = _getPlatform(platformServer, options);\n  return _render(platform, platform.bootstrapModuleFactory(moduleFactory));\n}\n"]}