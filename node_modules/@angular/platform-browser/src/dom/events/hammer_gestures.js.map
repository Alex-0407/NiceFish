{"version":3,"sources":["../../../../../../modules/@angular/platform-browser/src/dom/events/hammer_gestures.ts"],"names":[],"mappings":"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","file":"hammer_gestures.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken} from '@angular/core';\n\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\n\nconst /** @type {?} */ EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n};\n\n/**\n * A DI token that you can use to provide{@link HammerGestureConfig} to Angular. Use it to configure\n * Hammer gestures.\n *\n * @experimental\n */\nexport const /** @type {?} */ HAMMER_GESTURE_CONFIG = new InjectionToken<HammerGestureConfig>('HammerGestureConfig');\n\nexport interface HammerInstance {\n  on(eventName: string, callback: Function): void;\n  off(eventName: string, callback: Function): void;\n}\n/**\n * \\@experimental\n */\nexport class HammerGestureConfig {\n  events: string[] = [];\n\n  overrides: {[key: string]: Object} = {};\n/**\n * @param {?} element\n * @return {?}\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new Hammer(element);\n\n    mc.get('pinch').set({enable: true});\n    mc.get('rotate').set({enable: true});\n\n    for (const /** @type {?} */ eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction HammerGestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nHammerGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHammerGestureConfig.ctorParameters;\n/** @type {?} */\nHammerGestureConfig.prototype.events;\n/** @type {?} */\nHammerGestureConfig.prototype.overrides;\n}\n\nexport class HammerGesturesPlugin extends EventManagerPlugin {\n/**\n * @param {?} doc\n * @param {?} _config\n */\nconstructor(\n       doc: any,\nprivate _config: HammerGestureConfig) {\n    super(doc);\n  }\n/**\n * @param {?} eventName\n * @return {?}\n */\nsupports(eventName: string): boolean {\n    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n      return false;\n    }\n\n    if (!( /** @type {?} */((window as any))).Hammer) {\n      throw new Error(`Hammer.js is not loaded, can not bind ${eventName} event`);\n    }\n\n    return true;\n  }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const /** @type {?} */ zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      const /** @type {?} */ mc = this._config.buildHammer(element);\n      const /** @type {?} */ callback = function(eventObj: HammerInput) {\n        zone.runGuarded(function() { handler(eventObj); });\n      };\n      mc.on(eventName, callback);\n      return () => mc.off(eventName, callback);\n    });\n  }\n/**\n * @param {?} eventName\n * @return {?}\n */\nisCustomEvent(eventName: string): boolean { return this._config.events.indexOf(eventName) > -1; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n{type: HammerGestureConfig, decorators: [{ type: Inject, args: [HAMMER_GESTURE_CONFIG, ] }, ]},\n];\n}\n\nfunction HammerGesturesPlugin_tsickle_Closure_declarations() {\n/** @type {?} */\nHammerGesturesPlugin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHammerGesturesPlugin.ctorParameters;\n/** @type {?} */\nHammerGesturesPlugin.prototype._config;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}