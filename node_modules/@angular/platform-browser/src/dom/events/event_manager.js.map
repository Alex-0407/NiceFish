{"version":3,"sources":["../../../../../../modules/@angular/platform-browser/src/dom/events/event_manager.ts"],"names":[],"mappings":"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","file":"event_manager.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken, NgZone} from '@angular/core';\n\nimport {getDOM} from '../dom_adapter';\n\n/**\n * @stable\n */\nexport const /** @type {?} */ EVENT_MANAGER_PLUGINS =\n    new InjectionToken<EventManagerPlugin[]>('EventManagerPlugins');\n/**\n * \\@stable\n */\nexport class EventManager {\nprivate _plugins: EventManagerPlugin[];\nprivate _eventNameToPlugin = new Map<string, EventManagerPlugin>();\n/**\n * @param {?} plugins\n * @param {?} _zone\n */\nconstructor( plugins: EventManagerPlugin[],\nprivate _zone: NgZone) {\n    plugins.forEach(p => p.manager = this);\n    this._plugins = plugins.slice().reverse();\n  }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const /** @type {?} */ plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler);\n  }\n/**\n * @param {?} target\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddGlobalEventListener(target: string, eventName: string, handler: Function): Function {\n    const /** @type {?} */ plugin = this._findPluginFor(eventName);\n    return plugin.addGlobalEventListener(target, eventName, handler);\n  }\n/**\n * @return {?}\n */\ngetZone(): NgZone { return this._zone; }\n/**\n * \\@internal\n * @param {?} eventName\n * @return {?}\n */\n_findPluginFor(eventName: string): EventManagerPlugin {\n    const /** @type {?} */ plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n\n    const /** @type {?} */ plugins = this._plugins;\n    for (let /** @type {?} */ i = 0; i < plugins.length; i++) {\n      const /** @type {?} */ plugin = plugins[i];\n      if (plugin.supports(eventName)) {\n        this._eventNameToPlugin.set(eventName, plugin);\n        return plugin;\n      }\n    }\n    throw new Error(`No event manager plugin found for event ${eventName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Inject, args: [EVENT_MANAGER_PLUGINS, ] }, ]},\n{type: NgZone, },\n];\n}\n\nfunction EventManager_tsickle_Closure_declarations() {\n/** @type {?} */\nEventManager.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEventManager.ctorParameters;\n/** @type {?} */\nEventManager.prototype._plugins;\n/** @type {?} */\nEventManager.prototype._eventNameToPlugin;\n/** @type {?} */\nEventManager.prototype._zone;\n}\n\n/**\n * @abstract\n */\nexport abstract class EventManagerPlugin {\n/**\n * @param {?} _doc\n */\nconstructor(private _doc: any) {}\n\n  manager: EventManager;\n/**\n * @abstract\n * @param {?} eventName\n * @return {?}\n */\nsupports(eventName: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function) {}\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddGlobalEventListener(element: string, eventName: string, handler: Function): Function {\n    const /** @type {?} */ target: HTMLElement = getDOM().getGlobalEventTarget(this._doc, element);\n    if (!target) {\n      throw new Error(`Unsupported event target ${target} for event ${eventName}`);\n    }\n    return this.addEventListener(target, eventName, handler);\n  };\n}\n\nfunction EventManagerPlugin_tsickle_Closure_declarations() {\n/** @type {?} */\nEventManagerPlugin.prototype.manager;\n/** @type {?} */\nEventManagerPlugin.prototype._doc;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}