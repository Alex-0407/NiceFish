{"version":3,"sources":["../../../../../modules/@angular/platform-browser/src/security/html_sanitizer.ts"],"names":[],"mappings":"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","file":"html_sanitizer.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isDevMode} from '@angular/core';\n\nimport {DomAdapter, getDOM} from '../dom/dom_adapter';\nimport {DOCUMENT} from '../dom/dom_tokens';\n\nimport {sanitizeSrcset, sanitizeUrl} from './url_sanitizer';\n\n/** A <body> element that can be safely used to parse untrusted HTML. Lazily initialized below. */\nlet /** @type {?} */ inertElement: HTMLElement = null;\n/** Lazily initialized to make sure the DOM adapter gets set before use. */\nlet /** @type {?} */ DOM: DomAdapter = null;\n/**\n * Returns an HTML element that is guaranteed to not execute code when creating elements in it.\n * @return {?}\n */\nfunction getInertElement() {\n  if (inertElement) return inertElement;\n  DOM = getDOM();\n\n  // Prefer using <template> element if supported.\n  const /** @type {?} */ templateEl = DOM.createElement('template');\n  if ('content' in templateEl) return templateEl;\n\n  const /** @type {?} */ doc = DOM.createHtmlDocument();\n  inertElement = DOM.querySelector(doc, 'body');\n  if (inertElement == null) {\n    // usually there should be only one body element in the document, but IE doesn't have any, so we\n    // need to create one.\n    const /** @type {?} */ html = DOM.createElement('html', doc);\n    inertElement = DOM.createElement('body', doc);\n    DOM.appendChild(html, inertElement);\n    DOM.appendChild(doc, html);\n  }\n  return inertElement;\n}\n/**\n * @param {?} tags\n * @return {?}\n */\nfunction tagSet(tags: string): {[k: string]: boolean} {\n  const /** @type {?} */ res: {[k: string]: boolean} = {};\n  for (const /** @type {?} */ t of tags.split(',')) res[t] = true;\n  return res;\n}\n/**\n * @param {...?} sets\n * @return {?}\n */\nfunction merge(...sets: {[k: string]: boolean}[]): {[k: string]: boolean} {\n  const /** @type {?} */ res: {[k: string]: boolean} = {};\n  for (const /** @type {?} */ s of sets) {\n    for (const /** @type {?} */ v in s) {\n      if (s.hasOwnProperty(v)) res[v] = true;\n    }\n  }\n  return res;\n}\n\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\nconst /** @type {?} */ VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\nconst /** @type {?} */ OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nconst /** @type {?} */ OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nconst /** @type {?} */ OPTIONAL_END_TAG_ELEMENTS =\n    merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n\n// Safe Block Elements - HTML5\nconst /** @type {?} */ BLOCK_ELEMENTS = merge(\n    OPTIONAL_END_TAG_BLOCK_ELEMENTS,\n    tagSet(\n        'address,article,' +\n        'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n        'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n\n// Inline Elements - HTML5\nconst /** @type {?} */ INLINE_ELEMENTS = merge(\n    OPTIONAL_END_TAG_INLINE_ELEMENTS,\n    tagSet(\n        'a,abbr,acronym,audio,b,' +\n        'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n        'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n\nconst /** @type {?} */ VALID_ELEMENTS =\n    merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n\n// Attributes that have href and hence need to be sanitized\nconst /** @type {?} */ URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n\n// Attributes that have special href set hence need to be sanitized\nconst /** @type {?} */ SRCSET_ATTRS = tagSet('srcset');\n\nconst /** @type {?} */ HTML_ATTRS = tagSet(\n    'abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n\n// NB: This currently conciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\n\nconst /** @type {?} */ VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\npublic sanitizedSomething = false;\nprivate buf: string[] = [];\n/**\n * @param {?} el\n * @return {?}\n */\nsanitizeChildren(el: Element): string {\n    // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n    // However this code never accesses properties off of `document` before deleting its contents\n    // again, so it shouldn't be vulnerable to DOM clobbering.\n    let /** @type {?} */ current: Node = el.firstChild;\n    while (current) {\n      if (DOM.isElementNode(current)) {\n        this.startElement( /** @type {?} */((current as Element)));\n      } else if (DOM.isTextNode(current)) {\n        this.chars(DOM.nodeValue(current));\n      } else {\n        // Strip non-element, non-text nodes.\n        this.sanitizedSomething = true;\n      }\n      if (DOM.firstChild(current)) {\n        current = DOM.firstChild(current);\n        continue;\n      }\n      while (current) {\n        // Leaving the element. Walk up and to the right, closing tags as we go.\n        if (DOM.isElementNode(current)) {\n          this.endElement( /** @type {?} */((current as Element)));\n        }\n        if (DOM.nextSibling(current)) {\n          current = DOM.nextSibling(current);\n          break;\n        }\n        current = DOM.parentElement(current);\n      }\n    }\n    return this.buf.join('');\n  }\n/**\n * @param {?} element\n * @return {?}\n */\nprivate startElement(element: Element) {\n    const /** @type {?} */ tagName = DOM.nodeName(element).toLowerCase();\n    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.sanitizedSomething = true;\n      return;\n    }\n    this.buf.push('<');\n    this.buf.push(tagName);\n    DOM.attributeMap(element).forEach((value: string, attrName: string) => {\n      const /** @type {?} */ lower = attrName.toLowerCase();\n      if (!VALID_ATTRS.hasOwnProperty(lower)) {\n        this.sanitizedSomething = true;\n        return;\n      }\n      // TODO(martinprobst): Special case image URIs for data:image/...\n      if (URI_ATTRS[lower]) value = sanitizeUrl(value);\n      if (SRCSET_ATTRS[lower]) value = sanitizeSrcset(value);\n      this.buf.push(' ');\n      this.buf.push(attrName);\n      this.buf.push('=\"');\n      this.buf.push(encodeEntities(value));\n      this.buf.push('\"');\n    });\n    this.buf.push('>');\n  }\n/**\n * @param {?} current\n * @return {?}\n */\nprivate endElement(current: Element) {\n    const /** @type {?} */ tagName = DOM.nodeName(current).toLowerCase();\n    if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.buf.push('</');\n      this.buf.push(tagName);\n      this.buf.push('>');\n    }\n  }\n/**\n * @param {?} chars\n * @return {?}\n */\nprivate chars(chars: any /** TODO #9100 */) { this.buf.push(encodeEntities(chars)); }\n}\n\nfunction SanitizingHtmlSerializer_tsickle_Closure_declarations() {\n/** @type {?} */\nSanitizingHtmlSerializer.prototype.sanitizedSomething;\n/** @type {?} */\nSanitizingHtmlSerializer.prototype.buf;\n}\n\n\n// Regular Expressions for parsing tags and attributes\nconst /** @type {?} */ SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nconst /** @type {?} */ NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param {?} value\n * @return {?}\n */\nfunction encodeEntities(value: string) {\n  return value.replace(/&/g, '&amp;')\n      .replace(\n          SURROGATE_PAIR_REGEXP,\n          function(match: string) {\n            const /** @type {?} */ hi = match.charCodeAt(0);\n            const /** @type {?} */ low = match.charCodeAt(1);\n            return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n          })\n      .replace(\n          NON_ALPHANUMERIC_REGEXP,\n          function(match: string) { return '&#' + match.charCodeAt(0) + ';'; })\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n}\n/**\n * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo').\n * \n * This is undesirable since we don't want to allow any of these custom attributes. This method\n * strips them all.\n * @param {?} el\n * @return {?}\n */\nfunction stripCustomNsAttrs(el: Element) {\n  DOM.attributeMap(el).forEach((_, attrName) => {\n    if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n      DOM.removeAttribute(el, attrName);\n    }\n  });\n  for (const /** @type {?} */ n of DOM.childNodesAsList(el)) {\n    if (DOM.isElementNode(n)) stripCustomNsAttrs( /** @type {?} */((n as Element)));\n  }\n}\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n * @param {?} defaultDoc\n * @param {?} unsafeHtmlInput\n * @return {?}\n */\nexport function sanitizeHtml(defaultDoc: any, unsafeHtmlInput: string): string {\n  try {\n    const /** @type {?} */ containerEl = getInertElement();\n    // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n    let /** @type {?} */ unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n\n    // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n    // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n    let /** @type {?} */ mXSSAttempts = 5;\n    let /** @type {?} */ parsedHtml = unsafeHtml;\n\n    do {\n      if (mXSSAttempts === 0) {\n        throw new Error('Failed to sanitize html because the input is unstable');\n      }\n      mXSSAttempts--;\n\n      unsafeHtml = parsedHtml;\n      DOM.setInnerHTML(containerEl, unsafeHtml);\n      if (defaultDoc.documentMode) {\n        // strip custom-namespaced attributes on IE<=11\n        stripCustomNsAttrs(containerEl);\n      }\n      parsedHtml = DOM.getInnerHTML(containerEl);\n    } while (unsafeHtml !== parsedHtml);\n\n    const /** @type {?} */ sanitizer = new SanitizingHtmlSerializer();\n    const /** @type {?} */ safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);\n\n    // Clear out the body element.\n    const /** @type {?} */ parent = DOM.getTemplateContent(containerEl) || containerEl;\n    for (const /** @type {?} */ child of DOM.childNodesAsList(parent)) {\n      DOM.removeChild(parent, child);\n    }\n\n    if (isDevMode() && sanitizer.sanitizedSomething) {\n      DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');\n    }\n\n    return safeHtml;\n  } catch ( /** @type {?} */e) {\n    // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n    inertElement = null;\n    throw e;\n  }\n}\n"]}