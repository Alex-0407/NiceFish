{"version":3,"sources":["../../../../../modules/@angular/platform-browser/src/security/dom_sanitization_service.ts"],"names":[],"mappings":"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","file":"dom_sanitization_service.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Sanitizer, SecurityContext} from '@angular/core';\n\nimport {DOCUMENT} from '../dom/dom_tokens';\n\nimport {sanitizeHtml} from './html_sanitizer';\nimport {sanitizeStyle} from './style_sanitizer';\nimport {sanitizeUrl} from './url_sanitizer';\n\nexport {SecurityContext};\n\n\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @stable\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @stable\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @stable\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @stable\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @stable\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @stable\n */\nexport interface SafeResourceUrl extends SafeValue {}\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n * \n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n * \n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n * \n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n * \n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n * \n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n * \n * \\@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](http://g.co/ng/security).\n * \n * \\@stable\n * @abstract\n */\nexport abstract class DomSanitizer implements Sanitizer {\n/**\n * Sanitizes a value for use in the given SecurityContext.\n * \n * If value is trusted for the context, this method will unwrap the contained safe value and use\n * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\n * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\n * is responsible to make sure that the value can definitely be safely used in the given context.\n * @abstract\n * @param {?} context\n * @param {?} value\n * @return {?}\n */\nsanitize(context: SecurityContext, value: any) {}\n/**\n * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n * leave safe HTML intact, so in most situations this method should not be used.\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustHtml(value: string) {}\n/**\n * Bypass security and trust the given value to be safe style value (CSS).\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustStyle(value: string) {}\n/**\n * Bypass security and trust the given value to be safe JavaScript.\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustScript(value: string) {}\n/**\n * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n * in hyperlinks or `<img src>`.\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustUrl(value: string) {}\n/**\n * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustResourceUrl(value: string) {}\n}\nexport class DomSanitizerImpl extends DomSanitizer {\n/**\n * @param {?} _doc\n */\nconstructor(\nprivate _doc: any) { super(); }\n/**\n * @param {?} ctx\n * @param {?} value\n * @return {?}\n */\nsanitize(ctx: SecurityContext, value: any): string {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return value;\n      case SecurityContext.HTML:\n        if (value instanceof SafeHtmlImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'HTML');\n        return sanitizeHtml(this._doc, String(value));\n      case SecurityContext.STYLE:\n        if (value instanceof SafeStyleImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Style');\n        return sanitizeStyle(value);\n      case SecurityContext.SCRIPT:\n        if (value instanceof SafeScriptImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Script');\n        throw new Error('unsafe value used in a script context');\n      case SecurityContext.URL:\n        if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\n          // Allow resource URLs in URL contexts, they are strictly more trusted.\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'URL');\n        return sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (value instanceof SafeResourceUrlImpl) {\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'ResourceURL');\n        throw new Error(\n            'unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n      default:\n        throw new Error(`Unexpected SecurityContext ${ctx} (see http://g.co/ng/security#xss)`);\n    }\n  }\n/**\n * @param {?} value\n * @param {?} expectedType\n * @return {?}\n */\nprivate checkNotSafeValue(value: any, expectedType: string) {\n    if (value instanceof SafeValueImpl) {\n      throw new Error(\n          `Required a safe ${expectedType}, got a ${value.getTypeName()} ` +\n          `(see http://g.co/ng/security#xss)`);\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustHtml(value: string): SafeHtml { return new SafeHtmlImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustStyle(value: string): SafeStyle { return new SafeStyleImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustScript(value: string): SafeScript { return new SafeScriptImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustUrl(value: string): SafeUrl { return new SafeUrlImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return new SafeResourceUrlImpl(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction DomSanitizerImpl_tsickle_Closure_declarations() {\n/** @type {?} */\nDomSanitizerImpl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDomSanitizerImpl.ctorParameters;\n/** @type {?} */\nDomSanitizerImpl.prototype._doc;\n}\n\n/**\n * @abstract\n */\nabstract class SafeValueImpl implements SafeValue {\n/**\n * @param {?} changingThisBreaksApplicationSecurity\n */\nconstructor(public changingThisBreaksApplicationSecurity: string) {\n    // empty\n  }\n/**\n * @abstract\n * @return {?}\n */\ngetTypeName() {}\n/**\n * @return {?}\n */\ntoString() {\n    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n        ` (see http://g.co/ng/security#xss)`;\n  }\n}\n\nfunction SafeValueImpl_tsickle_Closure_declarations() {\n/** @type {?} */\nSafeValueImpl.prototype.changingThisBreaksApplicationSecurity;\n}\n\nclass SafeHtmlImpl extends SafeValueImpl implements SafeHtml {\n/**\n * @return {?}\n */\ngetTypeName() { return 'HTML'; }\n}\nclass SafeStyleImpl extends SafeValueImpl implements SafeStyle {\n/**\n * @return {?}\n */\ngetTypeName() { return 'Style'; }\n}\nclass SafeScriptImpl extends SafeValueImpl implements SafeScript {\n/**\n * @return {?}\n */\ngetTypeName() { return 'Script'; }\n}\nclass SafeUrlImpl extends SafeValueImpl implements SafeUrl {\n/**\n * @return {?}\n */\ngetTypeName() { return 'URL'; }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl implements SafeResourceUrl {\n/**\n * @return {?}\n */\ngetTypeName() { return 'ResourceURL'; }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}