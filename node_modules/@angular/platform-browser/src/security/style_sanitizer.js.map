{"version":3,"sources":["../../../../../modules/@angular/platform-browser/src/security/style_sanitizer.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,SAAE,EAAS,MAAA,eAAA,CAAA;AAElB,OAAO,EAAA,MAAE,EAAM,MAAA,oBAAA,CAAA;AAEf,OAAO,EAAA,WAAE,EAAW,MAAA,iBAAA,CAAA;AAGpB;;;;;;;;;;;;;GAaG;AACH,IAAM,gBAAgB,CAAhB,MAAA,GAAS,yBAAA,CAA0B;AACzC,IAAM,gBAAgB,CAAhB,kBAAA,GAAqB,+DAAA,CAAgE;AAC3F,IAAM,gBAAgB,CAAhB,SAAA,GAAY,eAAA,CAAgB;AAClC,IAAM,gBAAgB,CAAhB,SAAA,GAAY,2CAAA,CAA4C;AAC9D,IAAM,gBAAgB,CAAhB,QAAA,GAAW,eAAA,CAAgB;AACjC,IAAM,gBAAgB,CAAhB,OAAA,GAAU,0BAAA,CAA2B;AAC3C,IAAM,gBAAgB,CAAhB,gBAAA,GAAmB,IAAI,MAAA,CACzB,OAAK,MAAC,MAAM;KACR,QAAM,kBAAC,SAAkB,SAAI,SAAS,SAAI,SAAS,QAAI,MAAQ,CAAA;KAC5D,OAAC,OAAO,CAAA,EACf,GAAG,CAAC,CAAC;AAET;;;;;;;;;;;;;;;;;GAiBG;AACH,IAAM,gBAAgB,CAAhB,MAAA,GAAS,kBAAA,CAAmB;AAClC;;;;;;;;;GASG;AACH,2BADC,KAAA;IAEC,IAAI,gBAAgB,CADhB,aAAA,GAAgB,IAAA,CAAK;IAEzB,IAAI,gBAAgB,CADhB,aAAA,GAAgB,IAAA,CAAK;IAEzB,GAAG,CAAC,CAAC,IADC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,KAAA,CAAM,MAAC,EAAO,CAAA,EAAE,EAAG,CAAA;QAErC,IAAM,gBAAgB,CADhB,CAAA,GAAI,KAAA,CAAM,MAAC,CAAM,CAAC,CAAC,CAAC;QAE1B,EAAE,CAAC,CAAC,CADC,KAAK,IAAA,IAAQ,aAAA,CAAc,CAAC,CAAA;YAE/B,aAAa,GADG,CAAA,aAAE,CAAa;QAEjC,CAAC;QADC,IAAA,CAAK,EAAA,CAAA,CAAA,CAAK,KAAK,GAAA,IAAO,aAAA,CAAc,CAAC,CAAA;YAErC,aAAa,GADG,CAAA,aAAE,CAAa;QAEjC,CAAC;IACH,CAAC;IACD,MAAM,CADC,aAAA,IAAiB,aAAA,CAAc;AAExC,CAAC;AACD;;;;;GAKG;AACH,MAFC,wBAAA,KAAA;IAGC,KAAK,GAFG,MAAA,CAAO,KAAC,CAAK,CAAC,IAAC,EAAI,CAAE,CAAC,oCAAA;IAG9B,EAAE,CAAC,CAAC,CAFC,KAAC,CAAK;QAAC,MAAA,CAAO,EAAA,CAAG;IAItB,+FAA+F;IAC/F,yBAAyB;IACzB,IAAM,gBAAgB,CAFhB,QAAA,GAAW,KAAA,CAAM,KAAC,CAAK,MAAC,CAAM,CAAC;IAGrC,EAAE,CAAC,CAAC,CAFC,QAAC,IAAW,WAAA,CAAY,QAAC,CAAQ,CAAC,CAAC,CAAC,KAAK,QAAA,CAAS,CAAC,CAAC,CAAC;QAGtD,KAAK,CAFC,KAAC,CAAK,gBAAC,CAAgB,IAAI,iBAAA,CAAkB,KAAC,CAAK,CAAC,CAAC,CAAA;QAG7D,MAAM,CAFC,KAAA,CAAM,CAAC,qBAAA;IAGhB,CAAC;IAED,EAAE,CAAC,CAAC,SAFC,EAAS,CAAE,CAAC,CAAA;QAGf,MAAM,EAFC,CAAE,GAAC,CAGN,4CAA0C,KAFC,wCAAK,CAAqC,CAAC;IAG5F,CAAC;IAED,MAAM,CAFC,QAAA,CAAS;AAGlB,CAAC","file":"style_sanitizer.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isDevMode} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\n\nimport {sanitizeUrl} from './url_sanitizer';\n\n\n/**\n * Regular expression for safe style values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n *\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n * of XSS.\n *\n * The function expression checks only for XSS safety, not for CSS validity.\n *\n * This regular expression was taken from the Closure sanitization library, and augmented for\n * transformation values.\n */\nconst /** @type {?} */ VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\nconst /** @type {?} */ TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\nconst /** @type {?} */ COLOR_FNS = '(?:rgb|hsl)a?';\nconst /** @type {?} */ GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\nconst /** @type {?} */ CSS3_FNS = '(?:calc|attr)';\nconst /** @type {?} */ FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\nconst /** @type {?} */ SAFE_STYLE_VALUE = new RegExp(\n    `^(${VALUES}|` +\n        `(?:${TRANSFORMATION_FNS}|${COLOR_FNS}|${GRADIENTS}|${CSS3_FNS})` +\n        `${FN_ARGS})$`,\n    'g');\n\n/**\n * Matches a `url(...)` value with an arbitrary argument as long as it does\n * not contain parentheses.\n *\n * The URL value still needs to be sanitized separately.\n *\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n * by observing whether scroll bars are displayed, or character ranges used by a font face\n * definition.\n *\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n * binding a URL value without further cooperation from the page will cause an information leak, and\n * if so, it is just a leak, not a full blown XSS vulnerability.\n *\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n * code is permissive and allows URLs that sanitize otherwise.\n */\nconst /** @type {?} */ URL_RE = /^url\\(([^)]+)\\)$/;\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n * \n * This code was taken from the Closure sanitization library.\n * @param {?} value\n * @return {?}\n */\nfunction hasBalancedQuotes(value: string) {\n  let /** @type {?} */ outsideSingle = true;\n  let /** @type {?} */ outsideDouble = true;\n  for (let /** @type {?} */ i = 0; i < value.length; i++) {\n    const /** @type {?} */ c = value.charAt(i);\n    if (c === '\\'' && outsideDouble) {\n      outsideSingle = !outsideSingle;\n    } else if (c === '\"' && outsideSingle) {\n      outsideDouble = !outsideDouble;\n    }\n  }\n  return outsideSingle && outsideDouble;\n}\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n * @param {?} value\n * @return {?}\n */\nexport function sanitizeStyle(value: string): string {\n  value = String(value).trim();  // Make sure it's actually a string.\n  if (!value) return '';\n\n  // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n  // reasoning behind this.\n  const /** @type {?} */ urlMatch = value.match(URL_RE);\n  if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n      value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n    return value;  // Safe style values.\n  }\n\n  if (isDevMode()) {\n    getDOM().log(\n        `WARNING: sanitizing unsafe style value ${value} (see http://g.co/ng/security#xss).`);\n  }\n\n  return 'unsafe';\n}\n"]}