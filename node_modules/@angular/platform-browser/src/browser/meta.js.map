{"version":3,"sources":["../../../../../modules/@angular/platform-browser/src/browser/meta.ts"],"names":[],"mappings":"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","file":"meta.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable} from '@angular/core';\n\nimport {DomAdapter, getDOM} from '../dom/dom_adapter';\nimport {DOCUMENT} from '../dom/dom_tokens';\n\n\n/**\n * Represents a meta element.\n *\n * @experimental\n */\nexport type MetaDefinition = {\n  charset?: string; content?: string; httpEquiv?: string; id?: string; itemprop?: string;\n  name?: string;\n  property?: string;\n  scheme?: string;\n  url?: string;\n} &\n{\n  // TODO(IgorMinar): this type looks wrong\n  [prop: string]: string;\n};\n/**\n * A service that can be used to get and add meta tags.\n * \n * \\@experimental\n */\nexport class Meta {\nprivate _dom: DomAdapter;\n/**\n * @param {?} _doc\n */\nconstructor(\nprivate _doc: any) { this._dom = getDOM(); }\n/**\n * @param {?} tag\n * @param {?=} forceCreation\n * @return {?}\n */\naddTag(tag: MetaDefinition, forceCreation: boolean = false): HTMLMetaElement {\n    if (!tag) return null;\n    return this._getOrCreateElement(tag, forceCreation);\n  }\n/**\n * @param {?} tags\n * @param {?=} forceCreation\n * @return {?}\n */\naddTags(tags: MetaDefinition[], forceCreation: boolean = false): HTMLMetaElement[] {\n    if (!tags) return [];\n    return tags.reduce((result: HTMLMetaElement[], tag: MetaDefinition) => {\n      if (tag) {\n        result.push(this._getOrCreateElement(tag, forceCreation));\n      }\n      return result;\n    }, []);\n  }\n/**\n * @param {?} attrSelector\n * @return {?}\n */\ngetTag(attrSelector: string): HTMLMetaElement {\n    if (!attrSelector) return null;\n    return this._dom.querySelector(this._doc, `meta[${attrSelector}]`);\n  }\n/**\n * @param {?} attrSelector\n * @return {?}\n */\ngetTags(attrSelector: string): HTMLMetaElement[] {\n    if (!attrSelector) return [];\n    const /** @type {?} */ list /*NodeList*/ = this._dom.querySelectorAll(this._doc, `meta[${attrSelector}]`);\n    return list ? [].slice.call(list) : [];\n  }\n/**\n * @param {?} tag\n * @param {?=} selector\n * @return {?}\n */\nupdateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement {\n    if (!tag) return null;\n    selector = selector || this._parseSelector(tag);\n    const /** @type {?} */ meta: HTMLMetaElement = this.getTag(selector);\n    if (meta) {\n      return this._setMetaElementAttributes(tag, meta);\n    }\n    return this._getOrCreateElement(tag, true);\n  }\n/**\n * @param {?} attrSelector\n * @return {?}\n */\nremoveTag(attrSelector: string): void { this.removeTagElement(this.getTag(attrSelector)); }\n/**\n * @param {?} meta\n * @return {?}\n */\nremoveTagElement(meta: HTMLMetaElement): void {\n    if (meta) {\n      this._dom.remove(meta);\n    }\n  }\n/**\n * @param {?} meta\n * @param {?=} forceCreation\n * @return {?}\n */\nprivate _getOrCreateElement(meta: MetaDefinition, forceCreation: boolean = false):\n      HTMLMetaElement {\n    if (!forceCreation) {\n      const /** @type {?} */ selector: string = this._parseSelector(meta);\n      const /** @type {?} */ elem: HTMLMetaElement = this.getTag(selector);\n      // It's allowed to have multiple elements with the same name so it's not enough to\n      // just check that element with the same name already present on the page. We also need to\n      // check if element has tag attributes\n      if (elem && this._containsAttributes(meta, elem)) return elem;\n    }\n    const /** @type {?} */ element: HTMLMetaElement = /** @type {?} */(( this._dom.createElement('meta') as HTMLMetaElement));\n    this._setMetaElementAttributes(meta, element);\n    const /** @type {?} */ head = this._dom.getElementsByTagName(this._doc, 'head')[0];\n    this._dom.appendChild(head, element);\n    return element;\n  }\n/**\n * @param {?} tag\n * @param {?} el\n * @return {?}\n */\nprivate _setMetaElementAttributes(tag: MetaDefinition, el: HTMLMetaElement): HTMLMetaElement {\n    Object.keys(tag).forEach((prop: string) => this._dom.setAttribute(el, prop, tag[prop]));\n    return el;\n  }\n/**\n * @param {?} tag\n * @return {?}\n */\nprivate _parseSelector(tag: MetaDefinition): string {\n    const /** @type {?} */ attr: string = tag.name ? 'name' : 'property';\n    return `${attr}=\"${tag[attr]}\"`;\n  }\n/**\n * @param {?} tag\n * @param {?} elem\n * @return {?}\n */\nprivate _containsAttributes(tag: MetaDefinition, elem: HTMLMetaElement): boolean {\n    return Object.keys(tag).every((key: string) => this._dom.getAttribute(elem, key) === tag[key]);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction Meta_tsickle_Closure_declarations() {\n/** @type {?} */\nMeta.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMeta.ctorParameters;\n/** @type {?} */\nMeta.prototype._dom;\n/** @type {?} */\nMeta.prototype._doc;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}