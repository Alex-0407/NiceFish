{"version":3,"sources":["../../../../../modules/@angular/platform-browser/src/browser/testability.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAmD,oBAAA,EAAqB,MAAA,eAAA,CAAA;AAE/E,OAAO,EAAA,MAAE,EAAM,MAAA,oBAAA,CAAA;AACf,OAAO,EAAA,MAAE,EAAO,SAAA,EAAU,MAAA,gBAAA,CAAA;AAC1B;IAAA;IAiEA,CAAC;IAhED;;OAEG;IADA,0BAAA,GAEH,cAFkB,oBAAA,CAAqB,IAAI,qBAAA,EAAsB,CAAE,CAAC,CAAC,CAAA;IAGrE;;;OAGG;IACH,2CALG,GAKH,UALG,QAAA;QAMC,MAAM,CALC,qBAAC,GAAuB,UAAA,IAAO,EAAK,eAA2B;YAA3B,gCAAA,EAAA,sBAA2B;YAMpE,IAAM,gBAAgB,CALhB,WAAA,GAAc,QAAA,CAAS,qBAAC,CAAqB,IAAC,EAAK,eAAA,CAAgB,CAAC;YAM1E,EAAE,CAAC,CAAC,WALC,IAAc,IAAA,CAAK,CAAC,CAAA;gBAMvB,MALM,IAAI,KAAA,CAAM,yCAAC,CAAyC,CAAC;YAM7D,CAAC;YACD,MAAM,CALC,WAAA,CAAY;QAMrB,CAAC,CALC;QAOF,MAAM,CALC,0BAAC,GAA4B,cAAM,OAAA,QAAA,CAAS,mBAAC,EAAmB,EAA7B,CAA6B,CAAE;QAOzE,MAAM,CALC,yBAAC,GAA2B,cAAM,OAAA,QAAA,CAAS,kBAAC,EAAkB,EAA5B,CAA4B,CAAE;QAOvE,IAAM,gBAAgB,CALhB,aAAA,GAAgB,UAAA,QAAW,CAAI,iBAAA;YAMnC,IAAM,gBAAgB,CALhB,aAAA,GAAgB,MAAA,CAAO,0BAAC,EAA0B,CAAE;YAM1D,IAAI,gBAAgB,CALhB,KAAA,GAAQ,aAAA,CAAc,MAAC,CAAM;YAMjC,IAAI,gBAAgB,CALhB,OAAA,GAAU,KAAA,CAAM;YAMpB,IAAM,gBAAgB,CALhB,SAAA,GAAY,UAAA,QAAmB,CAAI,iBAAA;gBAMvC,OAAO,GALG,OAAA,IAAW,QAAA,CAAS;gBAM9B,KAAK,EALC,CAAE;gBAMR,EAAE,CAAC,CAAC,KALC,IAAQ,CAAA,CAAE,CAAC,CAAA;oBAMd,QAAQ,CALC,OAAC,CAAO,CAAC;gBAMpB,CAAC;YACH,CAAC,CALC;YAMF,aAAa,CALC,OAAC,CAAO,UAAC,WAAqB,CAAI,iBAAA;gBAM9C,WAAW,CALC,UAAC,CAAU,SAAC,CAAS,CAAC;YAMpC,CAAC,CALC,CAAC;QAML,CAAC,CALC;QAOF,EAAE,CAAC,CAAC,CALC,MAAC,CAAM,sBAAC,CAAsB,CAAC,CAAC,CAAA;YAMnC,MAAM,CALC,sBAAC,CAAsB,GAAG,EAAA,CAAG;QAMtC,CAAC;QACD,MAAM,CALC,sBAAC,CAAsB,CAAC,IAAC,CAAI,aAAC,CAAa,CAAC;IAMrD,CAAC;IACH;;;;;OAKG;IACH,qDAVG,GAUH,UAVG,QAAA,EAAA,IAAA,EAAA,eAAA;QAYC,EAAE,CAAC,CAAC,IAVC,IAAO,IAAA,CAAK,CAAC,CAAA;YAWhB,MAAM,CAVC,IAAA,CAAK;QAWd,CAAC;QACD,IAAM,gBAAgB,CAVhB,CAAA,GAAI,QAAA,CAAS,cAAC,CAAc,IAAC,CAAI,CAAC;QAWxC,EAAE,CAAC,CAAC,SAVC,CAAS,CAAC,CAAC,CAAC,CAAC,CAAA;YAWhB,MAAM,CAVC,CAAA,CAAE;QAWX,CAAC;QAVC,IAAA,CAAK,EAAA,CAAA,CAAA,CAAK,eAAC,CAAe,CAAC,CAAA;YAW3B,MAAM,CAVC,IAAA,CAAK;QAWd,CAAC;QACD,EAAE,CAAC,CAAC,MAVC,EAAM,CAAE,YAAC,CAAY,IAAC,CAAI,CAAC,CAAC,CAAA;YAW/B,MAAM,CAVC,IAAA,CAAK,qBAAC,CAAqB,QAAC,EAAS,MAAA,EAAO,CAAE,OAAC,CAAO,IAAC,CAAI,EAAE,IAAA,CAAK,CAAC;QAW5E,CAAC;QACD,MAAM,CAVC,IAAA,CAAK,qBAAC,CAAqB,QAAC,EAAS,MAAA,EAAO,CAAE,aAAC,CAAa,IAAC,CAAI,EAAE,IAAA,CAAK,CAAC;IAWlF,CAAC;IACH,4BAAC;AAAD,CAjEA,AAiEC,IAAA","file":"testability.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {GetTestability, Testability, TestabilityRegistry, setTestabilityGetter} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\nimport {global, isPresent} from '../facade/lang';\nexport class BrowserGetTestability implements GetTestability {\n/**\n * @return {?}\n */\nstatic init() { setTestabilityGetter(new BrowserGetTestability()); }\n/**\n * @param {?} registry\n * @return {?}\n */\naddToWindow(registry: TestabilityRegistry): void {\n    global.getAngularTestability = (elem: any, findInAncestors: boolean = true) => {\n      const /** @type {?} */ testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new Error('Could not find testability for element.');\n      }\n      return testability;\n    };\n\n    global.getAllAngularTestabilities = () => registry.getAllTestabilities();\n\n    global.getAllAngularRootElements = () => registry.getAllRootElements();\n\n    const /** @type {?} */ whenAllStable = (callback: any /** TODO #9100 */) => {\n      const /** @type {?} */ testabilities = global.getAllAngularTestabilities();\n      let /** @type {?} */ count = testabilities.length;\n      let /** @type {?} */ didWork = false;\n      const /** @type {?} */ decrement = function(didWork_: any /** TODO #9100 */) {\n        didWork = didWork || didWork_;\n        count--;\n        if (count == 0) {\n          callback(didWork);\n        }\n      };\n      testabilities.forEach(function(testability: any /** TODO #9100 */) {\n        testability.whenStable(decrement);\n      });\n    };\n\n    if (!global['frameworkStabilizers']) {\n      global['frameworkStabilizers'] = [];\n    }\n    global['frameworkStabilizers'].push(whenAllStable);\n  }\n/**\n * @param {?} registry\n * @param {?} elem\n * @param {?} findInAncestors\n * @return {?}\n */\nfindTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability {\n    if (elem == null) {\n      return null;\n    }\n    const /** @type {?} */ t = registry.getTestability(elem);\n    if (isPresent(t)) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (getDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);\n    }\n    return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);\n  }\n}\n"]}