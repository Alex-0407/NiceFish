{"version":3,"sources":["../../../../../../modules/@angular/platform-browser/src/browser/tools/common_tools.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,cAAE,EAA4B,MAAA,eAAA,CAAA;AAErC,OAAO,EAAA,MAAE,EAAM,MAAA,uBAAA,CAAA;AACf,OAAO,EAAA,MAAE,EAAM,MAAA,sBAAA,CAAA;AACf,OAAO,EAAgB,SAAA,EAAU,MAAA,mBAAA,CAAA;AACjC;IACA;;;OAGG;IACH,mCAFqB,SAAW,EAAe,QAAU;QAApC,cAAA,GAAA,SAAA,CAAW;QAAe,aAAA,GAAA,QAAA,CAAU;IAAO,CAAA;IAIhE,gCAAC;AAAD,CAPA,AAOC,IAAA;;AAED;IACA,gBAAgB;IAChB,yBAAyB,CAAC,SAAS,CAAC,SAAS,CAAC;IAC9C,gBAAgB;IAChB,yBAAyB,CAAC,SAAS,CAAC,QAAQ,CAAC;AAC7C,CAAC;AAED;;;GAGG;AACH;IAEA;;OAEG;IACH,yBAZG,GAAiC;QAAC,IAAA,CAAA,MAAA,GAAA,GAAA,CAAA,QAAA,CAAA,GAAA,CAAA,cAAA,CAAA,CAAA;IAAA,CAAA;IAarC;;;;;;;;;;;;;;;;;OAiBG;IACH,6CAZG,GAYH,UAZG,MAAA;QAaC,IAAM,gBAAgB,CAZhB,MAAA,GAAS,MAAA,IAAU,MAAA,CAAO,QAAC,CAAQ,CAAC;QAa1C,IAAM,gBAAgB,CAZhB,WAAA,GAAc,kBAAA,CAAmB;QAavC,sFAAsF;QACtF,IAAM,gBAAgB,CAZhB,mBAAA,GAAsB,SAAA,CAAU,MAAC,CAAM,OAAC,CAAO,OAAC,CAAO,CAAC;QAa9D,EAAE,CAAC,CAAC,MAZC,IAAS,mBAAA,CAAoB,CAAC,CAAA;YAajC,MAAM,CAZC,OAAC,CAAO,OAAC,CAAO,WAAC,CAAW,CAAC;QAatC,CAAC;QACD,IAAM,gBAAgB,CAZhB,KAAA,GAAQ,MAAA,EAAO,CAAE,cAAC,EAAc,CAAE;QAaxC,IAAI,gBAAgB,CAZhB,QAAA,GAAW,CAAA,CAAE;QAajB,OAAO,QAZC,GAAU,CAAA,IAAK,CAAA,MAAE,EAAM,CAAE,cAAC,EAAc,GAAI,KAAA,CAAM,GAAG,GAAA,EAAK,CAAA;YAahE,IAAI,CAZC,MAAC,CAAM,IAAC,EAAI,CAAE;YAanB,QAAQ,EAZC,CAAE;QAab,CAAC;QACD,IAAM,gBAAgB,CAZhB,GAAA,GAAM,MAAA,EAAO,CAAE,cAAC,EAAc,CAAE;QAatC,EAAE,CAAC,CAAC,MAZC,IAAS,mBAAA,CAAoB,CAAC,CAAA;YAajC,wEAAwE;YACxE,0BAA0B;YAC1B,EAAE;YACF,sEAAsE;YACtE,CAAkB,CAZZ,MAAC,CAAM,OAAC,CAAO,UAAC,CAAA,CAAU,CAAC,WAAC,CAAW,CAAC;QAahD,CAAC;QACD,IAAM,gBAAgB,CAZhB,SAAA,GAAY,CAAA,GAAE,GAAK,KAAA,CAAM,GAAG,QAAA,CAAS;QAa3C,MAAM,CAZC,OAAC,CAAO,GAAC,CAAG,SAAC,QAAO,6BAAQ,CAA0B,CAAC;QAa9D,MAAM,CAZC,OAAC,CAAO,GAAC,CAAI,SAAG,CAAS,OAAC,CAAO,CAAC,CAAC,kBAAC,CAAe,CAAC;QAc3D,MAAM,CAZC,IAAI,yBAAA,CAA0B,SAAC,EAAU,QAAA,CAAS,CAAC;IAa5D,CAAC;IACH,sBAAC;AAAD,CApDA,AAoDC,IAAA;;AAED;IACA,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC;AACjC,CAAC","file":"common_tools.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef, ComponentRef} from '@angular/core';\n\nimport {getDOM} from '../../dom/dom_adapter';\nimport {window} from '../../facade/browser';\nimport {NumberWrapper, isPresent} from '../../facade/lang';\nexport class ChangeDetectionPerfRecord {\n/**\n * @param {?} msPerTick\n * @param {?} numTicks\n */\nconstructor(public msPerTick: number,\npublic numTicks: number) {}\n}\n\nfunction ChangeDetectionPerfRecord_tsickle_Closure_declarations() {\n/** @type {?} */\nChangeDetectionPerfRecord.prototype.msPerTick;\n/** @type {?} */\nChangeDetectionPerfRecord.prototype.numTicks;\n}\n\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nexport class AngularProfiler {\n  appRef: ApplicationRef;\n/**\n * @param {?} ref\n */\nconstructor(ref: ComponentRef<any>) { this.appRef = ref.injector.get(ApplicationRef); }\n/**\n * Exercises change detection in a loop and then prints the average amount of\n * time in milliseconds how long a single round of change detection takes for\n * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n * of 500 milliseconds.\n * \n * Optionally, a user may pass a `config` parameter containing a map of\n * options. Supported options are:\n * \n * `record` (boolean) - causes the profiler to record a CPU profile while\n * it exercises the change detector. Example:\n * \n * ```\n * ng.profiler.timeChangeDetection({record: true})\n * ```\n * @param {?} config\n * @return {?}\n */\ntimeChangeDetection(config: any): ChangeDetectionPerfRecord {\n    const /** @type {?} */ record = config && config['record'];\n    const /** @type {?} */ profileName = 'Change Detection';\n    // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened\n    const /** @type {?} */ isProfilerAvailable = isPresent(window.console.profile);\n    if (record && isProfilerAvailable) {\n      window.console.profile(profileName);\n    }\n    const /** @type {?} */ start = getDOM().performanceNow();\n    let /** @type {?} */ numTicks = 0;\n    while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {\n      this.appRef.tick();\n      numTicks++;\n    }\n    const /** @type {?} */ end = getDOM().performanceNow();\n    if (record && isProfilerAvailable) {\n      // need to cast to <any> because type checker thinks there's no argument\n      // while in fact there is:\n      //\n      // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd\n      ( /** @type {?} */((<any>window.console.profileEnd)))(profileName);\n    }\n    const /** @type {?} */ msPerTick = (end - start) / numTicks;\n    window.console.log(`ran ${numTicks} change detection cycles`);\n    window.console.log(`${msPerTick.toFixed(2)} ms per check`);\n\n    return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n  }\n}\n\nfunction AngularProfiler_tsickle_Closure_declarations() {\n/** @type {?} */\nAngularProfiler.prototype.appRef;\n}\n\n"]}